@inject GlobalStates States
@inject IUserService UserService

@if (States.UserInfo is null)
{
    <h1>登录账户</h1>

    <TextField Style="width: 250px" Label="用户名" Placeholder="学号" @bind-Value="userName"></TextField>
    <TextField Style="width: 250px" Label="密码" InputType="InputType.Password" Placeholder="初始密码与学号相同" @bind-Value="password"></TextField>

    <br />

    <PrimaryButton OnClick="SignIn_Clicked" Disabled="submitting">登录</PrimaryButton>

}
else
{
    <h1>个人信息</h1>

    <p>编号：@States.UserInfo.Id</p>
    <p>用户名：@States.UserInfo.UserName</p>
    <p>姓名：@States.UserInfo.Name</p>

    <br />
    <TextField Label="原密码" InputType="InputType.Password" @bind-Value="oldPassword" />
    <TextField Label="新密码" InputType="InputType.Password" @bind-Value="newPassword" />
    <TextField Label="确认密码" InputType="InputType.Password" @bind-Value="confirmPassword" />
    <br />
    <PrimaryButton OnClick="ChangePasswordAsync" Disabled="submitting">修改密码</PrimaryButton>
    <DefaultButton OnClick="SignOutAsync">退出账户</DefaultButton>
}

@if (message is not null)
{
    <p style="@style">@message</p>
}

@code {
    private string userName = "";
    private string password = "";

    private string oldPassword = "", newPassword = "", confirmPassword = "";
    private string? message;
    private string? style;
    private bool submitting;

    private async Task ChangePasswordAsync(MouseEventArgs args)
    {
        submitting = true;
        try
        {
            if (newPassword != confirmPassword)
            {
                style = "color: red";
                message = "两次输入的密码不一致";
                return;
            }

            if (await UserService.ChangePasswordAsync(oldPassword, newPassword))
            {
                style = null;
                message = "密码修改成功";
                oldPassword = newPassword = confirmPassword = "";
            }
            else
            {
                style = "color: red";
                message = "密码修改失败";
            }
        }
        finally
        {
            submitting = false;
        }
    }

    private async Task SignIn_Clicked(MouseEventArgs args)
    {
        submitting = true;
        try
        {
            var userInfo = await UserService.SignInAsync(userName, password);
            States.UserInfo = userInfo;
            if (userInfo is null)
            {
                style = "color: red";
                message = "用户名或密码不正确";
            }
            else
            {
                message = style = null;
                userName = password = "";
            }
        }
        finally
        {
            submitting = false;
        }
    }

    private async Task SignOutAsync()
    {
        await UserService.SignOutAsync();
        States.UserInfo = null;
    }
}
