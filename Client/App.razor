@inject IUserService UserService
@inject GlobalStates States
@inject ComponentApplicationState ApplicationState
@using System.ComponentModel
@using System.Text.Json
@implements IDisposable

<Theme>
    <MainLayout />
    <LayerHost />
</Theme>

@code {
    protected override async Task OnInitializedAsync()
    {
        ApplicationState.OnPersisting += PersistGlobalStates;
        States.PropertyChanged += ChangeState;

        try
        {

            if (ApplicationState.TryTakePersistedState(nameof(States.UserInfo), out var userInfo))
            {
                try
                {
                    States.UserInfo = JsonSerializer.Deserialize<UserInfo>(userInfo);
                }
                catch
                {
                    States.UserInfo = await UserService.GetProfileAsync();
                }
            }
            else
            {
                States.UserInfo = await UserService.GetProfileAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message + "\n" + ex.StackTrace);
        }

        await base.OnInitializedAsync();
    }

    private Task PersistGlobalStates()
    {
        ApplicationState.PersistState(nameof(States.UserInfo), JsonSerializer.SerializeToUtf8Bytes(States.UserInfo));
        return Task.CompletedTask;
    }

    private void ChangeState(object? sender, PropertyChangedEventArgs args)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        ApplicationState.OnPersisting -= PersistGlobalStates;
        States.PropertyChanged -= ChangeState;
    }
}
